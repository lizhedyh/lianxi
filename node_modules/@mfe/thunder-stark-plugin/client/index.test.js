import { expect } from 'chai';
import thunderState from '../fixture/thunder-state-stark';
import {
  genStarkLink,
  recoverMin,
  handleResponse,
  StarkUpdatePlugin,
} from './';
import patchTestData from '../fixture/paywrap-test-stark';

describe('HTTP', function () {
  it('handleResponse', function () {
    const successResponseText = JSON.stringify({
      status: 2,
      code: 200,
      content: '=1\t-1\t=2\t-3\t+z',
      newFileChecksum: 1494092930
    })
    const source = 'abcdefg'
    const successResult = handleResponse(successResponseText, source)
    expect(successResult.statusCode).to.equal(200)
    expect(successResult.content).to.equal('acdz')
    expect(successResult.fullLength).to.equal('acdz'.length)
    expect(successResult.patchLength).to.equal('=1\t-1\t=2\t-3\t+z'.length)
    // expect(typeof successResult.recoverCost).to.equal('number')
    // expect(typeof successResult.crc32Cost).to.equal('number')
    // expect(typeof successResult.checksum).to.equal('number')
    const fullFileResponseText = JSON.stringify({
      status: 1,
      code: 429,
      content: 'acdz',
      newFileChecksum: 1494092930
    })
    const fullFileResult = handleResponse(fullFileResponseText, source)
    expect(fullFileResult.statusCode).to.equal(429)
    expect(fullFileResult.content).to.equal('acdz')
    expect(fullFileResult.fullLength).to.equal('acdz'.length)
    expect(fullFileResult.patchLength).to.equal('acdz'.length)
    // expect(typeof fullFileResult.recoverCost).to.equal('number')
    // expect(typeof fullFileResult.crc32Cost).to.equal('number')
    // expect(typeof fullFileResult.checksum).to.equal('number')
    const errorResponseText = JSON.stringify({
      status: 0,
      code: 500
    })
    // expect(handleResponse.bind(null, fullFileResponseText, source)).to.throwException(/Stark/)
    let hasThrown = false
    try {
      handleResponse(errorResponseText, source)
    } catch (e) {
      hasThrown = true
      expect(e.statusCode === 500).to.equal(true)
    }
    expect(hasThrown).to.equal(true)

    // wrong checksum
    // const WrongCheckSumResponseText = JSON.stringify({
    //   status: 2,
    //   code: 200,
    //   content: '=1\t-1\t=2\t-3\t+z',
    //   newFileChecksum: 1494092931
    // })
    // hasThrown = false
    // try {
    //   handleResponse(WrongCheckSumResponseText, source)
    // } catch (e) {
    //   hasThrown = true
    //   expect(e.statusCode).to.equal(409)
    // }
    // expect(hasThrown).to.equal(true)
  })
  it('patch with checksum', function () {
    const source = 'abcdefg'
    const payload = JSON.stringify({
      status: 2,
      code: 200,
      content: '=1\t-1\t=2\t-3\t+z',
      newFileChecksum: 1494092930
    })
    const result = handleResponse(payload, source)
    expect(result.statusCode).to.equal(200)
    expect(result.content).to.equal('acdz')
    expect(result.fullLength).to.equal('acdz'.length)
    expect(result.patchLength).to.equal('=1\t-1\t=2\t-3\t+z'.length)
  })
  it('patch without checksum', function () {
    const source = 'abcdefg'
    const payload = JSON.stringify({
      status: 2,
      code: 200,
      content: '=1\t-1\t=2\t-3\t+z'
    })
    const result = handleResponse(payload, source)
    expect(result.statusCode).to.equal(200)
    expect(result.content).to.equal('acdz')
    expect(result.fullLength).to.equal('acdz'.length)
    expect(result.patchLength).to.equal('=1\t-1\t=2\t-3\t+z'.length)
  })
});

describe('Patch', function () {
  it('simple patch', function () {
    const local = 'abcdefg'
    const remote = 'acdz'
    const patch = '=1\t-1\t=2\t-3\t+z'
    const { content } = recoverMin(local, patch)
    expect(content).to.be.equal(remote)
  })

  it('file patch', function () {
    const local = patchTestData.local.raw
    const remote = patchTestData.remote.raw
    const patch = patchTestData.patch.raw
    const { content } = recoverMin(local, patch)
    expect(content).to.be.equal(remote)
  })
});

describe('Link generate', function () {
  const mockThunder = {
    genChunkFileName: () => {
      return 'src-views-PageB-vue.c57bd1c44b8642861fca.js';
    }
  }
  it('full-link', function () {
    const chunkName = 'src-views-PageB-vue'
    const result = genStarkLink(chunkName, null, {
      type: 'js',
      hash: '1657eb9',
      filename: 'src-views-PageB-vue.c57bd1c44b8642861fca.js'
    }, thunderState.StarkOptions)
    expect(result).to.be.equal(undefined)
  })

  it('patch-link', function () {
    const chunkName = 'src-views-PageB-vue'
    const result = genStarkLink(chunkName, {
      type: 'js',
      hash: '1657eb9',
      filename: 'src-views-PageB-vue.1657eb9.js'
    }, {
      type: 'js',
      hash: '1657eb9',
      filename: 'src-views-PageB-vue.c57bd1c44b8642861fca.js'
    }, thunderState.StarkOptions)
    expect(result).to.be.equal(`https://jarvas.meituan.com/diff/3d07127a?oldFilePath=${encodeURIComponent('src-views-PageB-vue.1657eb9.js')}&newFilePath=${encodeURIComponent('src-views-PageB-vue.c57bd1c44b8642861fca.js')}`)
  })
});

describe('StarkUpdatePlugin', function () {
  it('init', function () {
    const updator = new StarkUpdatePlugin('app', {
      localChunk: {
        filename: 'src-views-PageB-vue.1657eb9.js',
        hash: 'src-views-PageB-vue.1657eb9.js',
        content: patchTestData.local.raw
      },
      remoteChunk: {
        type: 'js',
        hash: 'src-views-PageB-vue.1657eb9.js',
        filename: 'src-views-PageB-vue.1657eb9.js'
      }
    }, {
      address: '',
      projectName: ''
    }, {
      logger: {
        markOnce () {}
      },
      request: () => Promise.resolve(''),
      Promise: Promise
    })
  })
})
