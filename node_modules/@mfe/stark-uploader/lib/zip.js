const fs = require('fs');
const JSZip = require('jszip');
const flatten = require('lodash.flatten');
const {
  shuffleFiles,
  appendFileSize
} = require('./misc');

function _zipFiles (fs, files) {
  const zip = new JSZip();
  files.map(({fileName, filePath}) => {
    const content = fs.readFileSync(filePath);
    return zip.file(fileName, content);
  })
  return zip.generateAsync({
    type: 'nodebuffer',
    platform: process.platform,
  });
}

async function _zipFilesIntoChunks(fs, files, limit) {
  const completeFiles = appendFileSize(files);
  const shuffledFiles = shuffleFiles(completeFiles);
  const buf = await _zipFiles(fs, shuffledFiles);
  if (buf.byteLength < limit) {
    return [buf];
  }
  if (shuffledFiles.length === 1) {
    throw new Error(`File "${shuffledFiles[0].filePath}" is too large and cannot split.`);
  }
  const partA = shuffledFiles.slice(0, shuffledFiles.length >> 1);
  const partB = shuffledFiles.slice(shuffledFiles.length >> 1);
  const bufArrayA = await _zipFilesIntoChunks(fs, partA, limit);
  const bufArrayB = await _zipFilesIntoChunks(fs, partB, limit);
  return [...flatten(bufArrayA), ...flatten(bufArrayB)];
}

module.exports = {
  zipFiles: _zipFiles.bind(null, fs),
  zipFilesIntoChunks: _zipFilesIntoChunks.bind(null, fs),
};