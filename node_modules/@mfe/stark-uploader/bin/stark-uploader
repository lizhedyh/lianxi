#!/usr/bin/env node

const path = require('path');
const { version } = require('../package.json');
require("@babel/register")({
  cwd: path.resolve(__dirname, '../')
});
const program = require('commander');
const {
  uploadStaticAndDynamic,
  uploadStaticAndDynamicDryRun,
  DEFAULT_STATIC_UPLOAD_URL,
  DEFAULT_DYNAMIC_UPLOAD_URL
} = require("../index");


program
  .version(require('../package.json').version)
  .usage('[options] <basePath>')
  .option('--appkey <appkey>', 'Unique project identity on Stark')
  .option('--secretkey <secretkey>', 'Unique project secretkey on Stark. It is necessary when upload dynamic files')
  .option('--static [staticGlob]', 'Static file path glob for uploading. Use space to separate different globs. Example: "*.js *.css"', '')
  .option('--static-url [staticUrl]', 'Stark API endpoint for static file upload', DEFAULT_STATIC_UPLOAD_URL)
  .option('--dynamic-url [dynamicUrl]', 'Stark API endpoint for dynamic file upload', DEFAULT_DYNAMIC_UPLOAD_URL)
  .option('--dynamic [dynamicGlob]', 'Dynamic file path glob for uploading. Use space to separate different globs. Example: "service-worker.js *.html"', '')
  .option('--skip-validation', 'Do not validate uploaded content.')
  .option('--auto-split', 'Automatically split files into multiple upload jobs.')
  .option('--skip-filter', 'Do not filter existed files')
  .option('--dry', 'Dry run. Files won\'t be uploaded.')
  .option('--verbose', 'Show upload verbose log')
  .parse(process.argv);

const appKey = program.appkey;
const secretKey = program.secretkey;

if (!appKey) {
  console.error('appkey cannot be empty.\nSee "stark-uploader --help" for usage.');
  process.exit(-1);
}
if (program.dynamic && !secretKey) {
  //动态文件强制密钥
  console.error('secretkey cannot be empty when upload dynamic files.\nSee "stark-uploader --help" for usage.');
  process.exit(-1);
}
const uploadPath = path.resolve(process.cwd(), program.args[0]);

console.log('Stark-uploader version:', version);
console.log('AppKey:', appKey);
console.log('SecretKey:', secretKey);
console.log('Static File Upload Endpoint:', program.staticUrl);
console.log('Dynamic File Upload Endpoint:', program.dynamicUrl);
console.log('Upload Directory Base Path:', uploadPath);
console.log('Static glob:', program.static);
console.log('Dynamic glob:', program.dynamic);
console.log("Validation:", !program.skipValidation);
console.log("Auto-split:", program.autoSplit);
console.log("Skip-filter:", program.skipFilter);


if (program.dry) {
  uploadStaticAndDynamicDryRun(uploadPath, {
    staticFileInputGlobs: program.static,
    dynamicFileInputGlobs: program.dynamic
  });
  return;
}

uploadStaticAndDynamic(uploadPath, appKey, {
  staticUploadUrl: program.staticUrl,
  dynamicUploadUrl: program.dynamicUrl,
  staticFileInputGlobs: program.static,
  dynamicFileInputGlobs: program.dynamic,
  skipValidation: program.skipValidation,
  secretKey: program.secretkey || '',
  autoSplit: program.autoSplit,
  skipFilter: program.skipFilter,
  verbose: program.verbose,
})
  .then(result =>
    console.log('Upload results:', JSON.stringify(result, ' ', 2))
  )
  .catch((err) => {
    console.error(err)
    process.exit(-1)
  });