const uniq = require('lodash.uniq');
const uniqWith = require('lodash.uniqwith');
const isEqual = require('lodash.isequal');
const flatten = require('lodash.flatten');
const PromisePool = require('es6-promise-pool');
const { getChunkFileName } = require('./file-name-parser');
const { getAllVersionsOfFileFromGit } = require('./git-exports');
const { request } = require('./request');

const DIFF_MAX_TIME = '30s';

function parseThunderStateList(thunderStateList) {
  if (thunderStateList.length < 2) {
    console.log('Not enough versions to warmup.');
    throw new Error('Not enough versions to warmup.');
  }
  const lastThunderState = thunderStateList[thunderStateList.length - 1];
  const chunkNameList = Object.keys(lastThunderState.chunksMap);
  const verticalChunkMap = {};
  for (let i = 0; i < chunkNameList.length; i++) {
    verticalChunkMap[chunkNameList[i]] = thunderStateList.slice(0, thunderStateList.length).map((thunderState) => {
      return {
        chunk: thunderState.chunksMap[chunkNameList[i]],
        thunderState,
      };
    });
  }
  return verticalChunkMap;
}

function genWarmupChunkPairs(verticalChunkMap) {
  return Object.keys(verticalChunkMap).map((chunkName) => {
    const chunkInfoList = verticalChunkMap[chunkName];
    const lastChunkInfo = chunkInfoList[chunkInfoList.length - 1];
    return chunkInfoList
    .slice(0, chunkInfoList.length - 1)
    .map((chunkInfo) => {
      // 有时会出现chunksMap中新增了chunk的情况，而历史的chunksMap是没有这个chunk信息的。
      if (!chunkInfo.chunk) {
        return null;
      }
      return {
        name: chunkName,
        from: chunkInfo,
        to: lastChunkInfo,
      };
    })
    .filter((pair) => {
      return pair && pair.from && pair.to;
    });
  });
}

function chunkPairsToUrl(chunkPairs) {
  return Object.keys(chunkPairs).map((index) => {
    return uniq(chunkPairs[index].map(({ name, from, to }) => {
      const StarkOptions = to.thunderState.StarkOptions;
      if (!StarkOptions) {
        return null;
      }
      if (!from.thunderState.StarkOptions) {
        throw new Error('Cannot find StarkOptions in latest thunderState.');
      }
      const projectName = StarkOptions.projectName;
      // 如果projectName不一致，说明曾经更换过
      // 这种情况不要预热
      if (from.thunderState.StarkOptions.projectName !== projectName) {
        return null;
      }
      const oldFilePath = encodeURIComponent(getChunkFileName(from.thunderState, name));
      const newFilePath = encodeURIComponent(getChunkFileName(to.thunderState, name));
      return `/diff/${projectName}?oldFilePath=${oldFilePath}&newFilePath=${newFilePath}&diffMaxTime=${DIFF_MAX_TIME}`
    }).filter(url => !!url));
  });
}

function uniqfyState(stateList) {
  // NOTE: compilation和其他无关字段被刻意移除
  // 以免对state是否重复的判断产生影响
  const pureStates = stateList.map(f => ({
    chunksMap: f.chunksMap,
    StarkOptions: f.StarkOptions,
    outputOptions: f.outputOptions,
  }));
  return uniqWith(pureStates, isEqual);
}

function limitedPromiseAll(promiseCreator, concurrentCount) {
  if (concurrentCount < 1) {
    throw new Error(`concurrentCount: "${concurrentCount}" is too small`);
  }
  const pool = new PromisePool(promiseCreator, concurrentCount);
  pool.start();
  return pool;
}

function visit(urlList, concurrentCount) {
  return limitedPromiseAll(() => {
    const url = urlList.pop();
    if (!url) {
      return null;
    }
    return request(url);
  }, concurrentCount);
}

function isJson(str) {
  try {
    JSON.parse(str);
    return true;
  }
  catch (e) {
    return false;
  }
} 

function run(repoPath, filePath, versionCount, isDryRun, concurrentCount) {
  if (versionCount < 1) {
    throw new Error(`versionCount: "${versionCount}" is too small`);
  }
  return getAllVersionsOfFileFromGit(repoPath, filePath)
  .then(files => files.filter(f => isJson(f)))
  .then(files => files.map(f => JSON.parse(f)))
  .then(uniqfyState)
  .then(states => states.slice(0, versionCount + 1))
  // 最新的版本放在最后面
  .then(states => states.reverse())
  .then(parseThunderStateList)
  .then(genWarmupChunkPairs)
  .then(chunkPairsToUrl)
  .then(flatten)
  .then((urlList) => isDryRun ? console.log(urlList) : visit(urlList, concurrentCount));
}

module.exports = {
  warmup: run,
  _isJson: isJson,
  _uniqfyState: uniqfyState,
  _parseThunderStateList: parseThunderStateList,
  _genWarmupChunkPairs: genWarmupChunkPairs,
  _chunkPairsToUrl: chunkPairsToUrl,
  _limitedPromiseAll: limitedPromiseAll,
};