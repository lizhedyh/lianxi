export default class Emitter {
  constructor () {
    this._listeners = {}
  }

  $on (type, fn, ctx) {
    ctx = ctx || null
    if (!this._listeners[type]) this._listeners[type] = []
    this._listeners[type].push({
      fn: fn,
      ctx: ctx
    })
    return this._listeners[type].length - 1
  }

  $once (type, fn, ctx) {
    ctx = ctx || null
    const func = function (...args) {
      fn.apply(ctx, args)
      this.$off(type, func)
    }
    this.$on(type, func, this)
  }

  $off (type, fn) {
    if (!this._listeners[type] || !this._listeners[type].length) return
    if (!fn) {
      this._listeners[type].map(ctx => (ctx = null))
      this._listeners[type].length = 0
    }
    if (typeof fn === 'function') {
      this._listeners[type].map((ctx, i) => {
        if (ctx.fn === fn) {
          this._listeners[type].splice(i, 1)
          ctx = null
        }
      })
    }
    // if (typeof cb === 'number') {
    //   this._listeners[type].splice(cb, 1)
    // }
  }

  $emit (...args) {
    if (!args.length) return
    const type = args[0]
    args.shift()
    if (this._listeners[type] && this._listeners[type].length) {
      this._listeners[type].map(item => {
        item.fn.apply(item.ctx, args)
      })
    }
  }
}
