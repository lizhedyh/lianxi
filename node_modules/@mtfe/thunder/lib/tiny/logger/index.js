import { timeNow } from './helper'
import { assign } from '../util'
import lxReporter from './lx-report'
// import owl from './owl-report'

export class Logger {
  constructor ({ project, version, starkAppKey }) {
    this.project = project
    this.version = version
    this.starkAppKey = starkAppKey
    this.logQueue = []
    this.markQueue = {}
    this._reporters = [{
      reporter: lxReporter.report,
      channel: 'lx'
    }]
    this._timer = null
  }

  use (fn, channel) {
    if (typeof fn !== 'function') return
    let has = false
    this._reporters.map(ctx => {
      if (ctx.reporter === fn) has = true
    })
    if (!has) {
      this._reporters.push({
        channel,
        reporter: fn
      })
    }
  }

  mark (key, data = {}) {
    if (!key) return
    this.markQueue[key] = {
      createdAt: timeNow(),
      data: data
    }
  }

  markEnd (key, data, noInject) {
    const mark = this.markQueue[key]
    if (!mark) return
    const now = timeNow()
    const cost = now - mark.createdAt
    const log = {
      key: key,
      data: assign(noInject ? {} : {
        project: this.project,
        starkAppKey: this.starkAppKey,
        cost: cost,
        name: key,
        version: this.version
      }, mark.data, data)
    }

    if (log.error) {
      return console.log(log.err)
    }

    if (log.data.cost) {
      log.data.cost = Math.floor(log.data.cost)
    }

    this.logQueue.push(log)
    delete this.markQueue[key]
    this.report()
  }

  markOnce (key, data, noInject) {
    this.mark(key, data)
    this.markEnd(key, data, noInject)
  }

  report () {
    if (this._timer) clearTimeout(this._timer)
    this._timer = setTimeout(this._report.bind(this), 300)
  }

  _report () {
    this._timer = null
    this.logQueue.forEach(log => {
      if (!log.data) return
      this._reporters.forEach(ctx => {
        if (log.data.channel) {
          if (ctx.channel === log.data.channel) {
            ctx.reporter(log.data)
          }
        } else {
          ctx.reporter(log.data)
        }
      })
    })

    this.logQueue.length = 0
  }
}

export default thunder => {
  thunder.logger = new Logger({
    version: thunder.version,
    project: thunder.state.project,
    starkAppKey: thunder.starkAppKey
  })
}
