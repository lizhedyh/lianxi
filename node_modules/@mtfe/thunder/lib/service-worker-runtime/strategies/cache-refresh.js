import CacheStrategy from './cache-strategy'

export default class CacheAndRefresh extends CacheStrategy {
  constructor ({ cacheName, cacheStore, helpers, options }) {
    super({
      name: 'CacheAndRefresh',
      cacheName,
      cacheStore,
      helpers,
      options
    })
  }

  handleRequest (req) {
    return this.cacheAndRefresh(req)
  }

  notifyUpdate (newRes, oldRes) {
    if (!newRes || !newRes.url) return
    // Etag matched, ignore
    if (newRes.headers.get('ETag') === oldRes.headers.get('ETag')) return this.debug('[notifyUpdate]: ignore')

    // TODO: need notify msg helper
    // console.log('msg', {
    //   type: 'thunder:refresh',
    //   url: newRes.url,
    //   eTag: newRes.headers.get('ETag')
    // })
  }

  cacheAndRefresh (req) {
    return this.getCache()
      .then(cache => {
        return cache.match(req)
      })
      .then(oldRes => {
        // no cache, only fetchAndCache
        if (!oldRes) return this.helpers.fetchAndCache(req)
        // has cache, notify aftet fetchAndCache
        this.helpers.logger.markEnd(req.url, {
          strategy: 'cacheAndRefresh'
        })
        this.debug('âœ… cacheAndRefresh ', req.url)
        this.helpers.fetchAndCache(req)
          .then(newRes => {
            this.notifyUpdate(newRes, oldRes)
          })
        return oldRes
      })
  }
}
