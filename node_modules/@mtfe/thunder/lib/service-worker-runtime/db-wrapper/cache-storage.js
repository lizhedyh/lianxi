export default class CacheStorage {
  constructor (NAME) {
    this.NAME = NAME
    this.PREFIX = '~CacheStorage~'
    this.PREFIX_REG = /~CacheStorage~/
  }

  _key (key) {
    return this.PREFIX + key
  }

  _getCache () {
    return caches.open(this.NAME)
      .then(cache => {
        this.cache = cache
        return cache
      })
  }

  count () {
    return this._getCache()
      .then(cache => {
        return cache.keys()
      })
      .then(caches => {
        const keys = caches.filter(req => {
          return this.PREFIX_REG.test(req.url)
        }).map(req => {
          return req.url.split(this.PREFIX)[1]
        })
        return keys.length
      })
  }

  keys () {
    let keys = []
    return this._getCache()
      .then(cache => {
        return cache.keys()
      })
      .then(caches => {
        keys = caches.filter(req => {
          return this.PREFIX_REG.test(req.url)
        }).map(req => {
          return req.url.split(this.PREFIX)[1]
        })
        return Promise.all(keys.map(key => this.get(key)))
      })
      .then(values => {
        return values.map((val, i) => {
          return {
            key: keys[i],
            val: val
          }
        })
      })
  }

  delete (key) {
    return this._getCache()
      .then(cache => {
        return cache.delete(this._key(key))
      })
  }

  get (key) {
    return this._getCache()
      .then(cache => {
        return cache.match(new URL(this._key(key), location).toString())
      })
      .then(response => {
        if (!response) return
        return response.json()
      })
  }

  set (key, val) {
    return this._getCache()
      .then(cache => {
        const data = new Response(JSON.stringify(val))
        return cache.put(new URL(this._key(key), location).toString(), data)
      })
  }
}
