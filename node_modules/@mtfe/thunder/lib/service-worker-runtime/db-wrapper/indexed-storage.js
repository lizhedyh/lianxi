import { debug } from '../helpers'

export default class IndexedDBStorage {
  constructor (name) {
    this.name = name
    this.db = null
    this.ready = this.init()
  }

  init () {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.name)

      request.onupgradeneeded = e => {
        this.db = e.target.result
        this.db.createObjectStore('store')
      }

      request.onsuccess = e => {
        this.db = e.target.result
        resolve()
      }

      request.onerror = e => {
        this.db = e.target.result
        reject(e)
      }
    })
  }

  async get (key) {
    await this.ready
    return new Promise((resolve, reject) => {
      const request = this.getStore('readonly').get(key)
      request.onsuccess = e => resolve(e.target.result)
      request.onerror = reject
    })
  }

  getStore (type = 'readwrite') {
    try {
      return this.db
        .transaction(['store'], type)
        .objectStore('store')
    } catch (e) {
      // force reinit
      debug('[ IndexedDBStorage getStore ]', e)
      this.ready = this.init()
    }
  }

  async set (key, value) {
    await this.ready
    return new Promise((resolve, reject) => {
      const request = this.getStore().put(value, key)
      request.onsuccess = resolve
      request.onerror = reject
    })
  }

  async count () {
    await this.ready
    return new Promise((resolve, reject) => {
      const request = this.getStore().count()
      request.onsuccess = event => resolve(event.target.result)
      request.onerror = reject
    })
  }

  async keys () {
    await this.ready
    return new Promise((resolve, reject) => {
      let request
      // 低版本 IDBObjectStore 可能没有 getAllKeys 方法
      const idbObjectStore = this.getStore()
      if ('getAllKeys' in idbObjectStore.constructor.prototype) {
        request = idbObjectStore.getAllKeys()
        request.onsuccess = event => resolve(event.target.result)
      } else {
        request = idbObjectStore.openCursor()
        let results = []
        request.onsuccess = function (event) {
          const cursor = event.target.result
          if (cursor) {
            results.push(cursor.key)
            cursor.continue()
          } else {
            resolve(results)
          }
        }
      }

      request.onerror = reject
    })
  }

  async delete (key) {
    await this.ready
    return new Promise((resolve, reject) => {
      const request = this.getStore().delete(key)
      request.onsuccess = event => resolve(event.target.result)
      request.onerror = reject
    })
  }

  clear (key, value) {
    indexedDB.deleteDatabase(this.name)
  }
}
