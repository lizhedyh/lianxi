import { assign } from './util'
// import { debug } from './helpers'

function timeNow () {
  if (performance && 'now' in performance) return performance.now()
  return Date.now()
}

export default class ThunderLogger {
  constructor () {
    this.logQueue = []
    this.markQueue = {}
  }

  mark (key, data = {}) {
    if (!key) return
    this.markQueue[key] = {
      createdAt: timeNow(),
      data: data
    }
  }

  markEnd (key, data) {
    const mark = this.markQueue[key]
    if (!mark) return
    const now = timeNow()
    const cost = now - mark.createdAt
    const log = {
      key: key,
      data: assign(mark.data, {
        cost: cost
      }, data)
    }

    this.logQueue.push(log)
    delete this.markQueue[key]
  }

  markOnce (key, data) {
    this.mark(key, data)
    this.markEnd(key, data)
  }
}
