const assert = require('assert')
const THUNDER_FLAG_REG = /<!--thunder-script-inject-->/

// hack HtmlWebpackPlugin
function hook ({ HtmlWebpackPlugin, inline = true, chunks, content }, thunderPlugin) {
  let _injectAssetsIntoHtml = HtmlWebpackPlugin.prototype.injectAssetsIntoHtml

  if ('__thunder__raw_injectAssetsIntoHtml' in HtmlWebpackPlugin.prototype) {
    _injectAssetsIntoHtml = HtmlWebpackPlugin.prototype.__thunder__raw_injectAssetsIntoHtml
  } else {
    HtmlWebpackPlugin.prototype.__thunder__raw_injectAssetsIntoHtml = _injectAssetsIntoHtml
  }

  HtmlWebpackPlugin.prototype.injectAssetsIntoHtml = function (html, assets, assetTags) {
    const thunderFilename = thunderPlugin.sdkFilename

    const thudnerSDKScript = {
      tagName: 'script',
      closeTag: true,
      attributes: {
        type: 'text/javascript'
      },
      innerHTML: inline ? thunderPlugin.state.thunderClient : ''
    }

    if (!inline) {
      thudnerSDKScript.attributes.src = `${assets.publicPath}${thunderFilename}`
    }

    assetTags.body = [thudnerSDKScript, {
      tagName: 'script',
      closeTag: true,
      attributes: {
        type: 'text/javascript'
      },
      innerHTML: content || genLoaderInitScript(chunks)
    }]

    // if exist replace <!--thunder-script-inject-->
    if (THUNDER_FLAG_REG.test(html)) {
      const scriptContent = assetTags.body.map(renderHTMLTag).join('')
      html = html.split(THUNDER_FLAG_REG).join(scriptContent)
      assetTags.body = []
    }

    return _injectAssetsIntoHtml.call(this, html, assets, assetTags)
  }
}

const loaderTemplate = {
  head: `
;(function (global) {
  var thunder = window.__thunder__
  thunder.parallel(`,
  tail: `)
})(window)
`
}

function genLoaderInitScript (chunks) {
  assert(Array.isArray(chunks), 'hookHtmlWebpackPlugin.chunks must be an array, but got: ', chunks)
  const chunksString = JSON.stringify(chunks)
  return [loaderTemplate.head, chunksString, loaderTemplate.tail].join('')
}

function renderHTMLTag (tag) {
  return `
  <${tag.tagName} ${
  Object.keys(tag.attributes)
    .map(key => tag.attributes[key] ? `${key}="${tag.attributes[key]}"` : '')
    .join(' ')
}>
    ${tag.innerHTML || ''}
  </${tag.tagName}>
  `
}

module.exports = hook
