const { join } = require('path')
class ChunkMatcher {
  constructor (props) {
    this.state = {
      publicPath: '',
      resources: []
    }
    this.dllChunk = ''
    this.updateState(props)
  }

  updateState ({ resources, publicPath } = {}) {
    this.state.resources = resources || this.state.resources
    this.state.publicPath = publicPath || ''
  }

  match (arg, type = 'js') {
    let names = []
    if (typeof arg === 'string') {
      names = [arg]
    }
    if (Array.isArray(arg)) {
      names = arg
    }

    return names.reduce((chunks, chunkName) => {
      this.state.resources.forEach(re => {
        if (re.type === type && re.name === chunkName) {
          chunks.push({
            type: type,
            attrs: re.attrs,
            link: re.link || this.state.publicPath + re.filename,
            content: ''
          })

          if (re.runScript) {
            chunks.push({
              type: type,
              attrs: re.attrs,
              link: '',
              content: re.runScript
            })
          }
        }
      })
      return chunks
    }, [])
  }

  getScript (chunkName) {
    const results = this.match(chunkName, 'js')
    if (this.dllChunk) results.unshift(join(this.state.publicPath, this.dllChunk))
    return results
  }

  getStyle (chunkName) {
    return this.match(chunkName, 'css')
  }

  getScripts (chunkNames) {
    return chunkNames.map(this.getScript.bind(this))
      .filter(v => v.length)
      .reduce((list, item) => {
        return list.concat(item)
      }, [])
  }

  getStyles (chunkNames) {
    return chunkNames.map(this.getStyle.bind(this))
      .filter(v => v.length)
      .reduce((list, item) => {
        return list.concat(item)
      }, [])
  }
}

module.exports = ChunkMatcher
