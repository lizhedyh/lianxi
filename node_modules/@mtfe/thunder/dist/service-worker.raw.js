/*!
 * thunder-service-worker-runtime v2.3.7
 * (c) 2019-07-02 14:28:13 */
(function () {
'use strict';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};









var asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var runtime = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  !function (global) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    var inModule = 'object' === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    runtime.awrap = function (arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    runtime.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function stop() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  function () {
    return this;
  }() || Function("return this")());
});

function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function strToReg(content) {
  if (content instanceof RegExp) return content;
  if (content instanceof Array) {
    return content.map(strToReg);
  }
  return new RegExp(content);
}

var isLocalhost = Boolean(location.hostname === 'localhost' || location.hostname === '[::1]' || location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));

// import { debug } from './helpers'

function timeNow() {
  if (performance && 'now' in performance) return performance.now();
  return Date.now();
}

var ThunderLogger = function () {
  function ThunderLogger() {
    classCallCheck(this, ThunderLogger);

    this.logQueue = [];
    this.markQueue = {};
  }

  createClass(ThunderLogger, [{
    key: 'mark',
    value: function mark(key) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!key) return;
      this.markQueue[key] = {
        createdAt: timeNow(),
        data: data
      };
    }
  }, {
    key: 'markEnd',
    value: function markEnd(key, data) {
      var mark = this.markQueue[key];
      if (!mark) return;
      var now = timeNow();
      var cost = now - mark.createdAt;
      var log = {
        key: key,
        data: assign(mark.data, {
          cost: cost
        }, data)
      };

      this.logQueue.push(log);
      delete this.markQueue[key];
    }
  }, {
    key: 'markOnce',
    value: function markOnce(key, data) {
      this.mark(key, data);
      this.markEnd(key, data);
    }
  }]);
  return ThunderLogger;
}();

function getCache(cacheName) {
  return caches.open(cacheName);
}

function debug() {
  if (!self.serviceWorkerRuntime || !self.serviceWorkerRuntime.options.debug) return;

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var type = args[0];
  var logger = void 0;
  if (console[type]) {
    logger = console[type];
    args.shift();
  } else {
    logger = console.log;
  }
  args.unshift('[Thunder-SW]');
  logger.apply(console, args);
}

function preCache(cacheName) {
  var preCacheItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  return getCache(cacheName).then(function (cache) {
    if (cache.addAll) return cache.addAll(preCacheItems);
    // TODO call fetch and cache single
  }).then(function () {
    debug('[preCache] cache added', preCacheItems);
  }).catch(function (err) {
    debug(err);
  });
}

function clearCache(exceptCache, options) {
  var scopeNameKey = '$$$thunder-serviceworker$$$' + options.scope;
  return caches.keys().then(function (cacheNames) {
    cacheNames.map(function (cacheName) {
      if (cacheName.indexOf(scopeNameKey) === -1) return;

      if (exceptCache !== cacheName) {
        debug('delete ', cacheName);
        caches.delete(cacheName);
      } else {
        debug('current cache is ', exceptCache);
      }
    });
  });
}

function parseHeader(headers, options) {
  var map = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = headers.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var val = _step.value;

      map[val[0]] = val[1];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  map['X-Thunder-User-Agent'] = options.userAgent;
  return map;
}

function simpleFetch(request, options) {
  var sameOrigin = new RegExp('^' + location.origin.replace(/\./g, '\\.').replace(/\//g, '\\/'));
  var job = void 0;
  if (sameOrigin.test(request.url)) {
    var fetchInit = {
      method: request.method,
      mode: 'cors',
      credentials: 'same-origin',
      headers: parseHeader(request.headers, options)
      // GET or HEAD 请求不能包含 body 信息
    };if (request.method !== 'GET' && request.method !== 'HEAD') {
      job = request.blob().then(function (data) {
        fetchInit.body = data;
        return fetch(request.url, fetchInit);
      });
    } else {
      job = fetch(request.url, fetchInit);
    }
  } else {
    job = fetch(request);
  }
  return job;
}

var IndexedDBStorage = function () {
  function IndexedDBStorage(name) {
    classCallCheck(this, IndexedDBStorage);

    this.name = name;
    this.db = null;
    this.ready = this.init();
  }

  createClass(IndexedDBStorage, [{
    key: 'init',
    value: function init() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var request = indexedDB.open(_this.name);

        request.onupgradeneeded = function (e) {
          _this.db = e.target.result;
          _this.db.createObjectStore('store');
        };

        request.onsuccess = function (e) {
          _this.db = e.target.result;
          resolve();
        };

        request.onerror = function (e) {
          _this.db = e.target.result;
          reject(e);
        };
      });
    }
  }, {
    key: 'get',
    value: function () {
      var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(key) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.ready;

              case 2:
                return _context.abrupt('return', new Promise(function (resolve, reject) {
                  var request = _this2.getStore('readonly').get(key);
                  request.onsuccess = function (e) {
                    return resolve(e.target.result);
                  };
                  request.onerror = reject;
                }));

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get$$1(_x) {
        return _ref.apply(this, arguments);
      }

      return get$$1;
    }()
  }, {
    key: 'getStore',
    value: function getStore() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'readwrite';

      try {
        return this.db.transaction(['store'], type).objectStore('store');
      } catch (e) {
        // force reinit
        debug('[ IndexedDBStorage getStore ]', e);
        this.ready = this.init();
      }
    }
  }, {
    key: 'set',
    value: function () {
      var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(key, value) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.ready;

              case 2:
                return _context2.abrupt('return', new Promise(function (resolve, reject) {
                  var request = _this3.getStore().put(value, key);
                  request.onsuccess = resolve;
                  request.onerror = reject;
                }));

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function set$$1(_x3, _x4) {
        return _ref2.apply(this, arguments);
      }

      return set$$1;
    }()
  }, {
    key: 'count',
    value: function () {
      var _ref3 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.ready;

              case 2:
                return _context3.abrupt('return', new Promise(function (resolve, reject) {
                  var request = _this4.getStore().count();
                  request.onsuccess = function (event) {
                    return resolve(event.target.result);
                  };
                  request.onerror = reject;
                }));

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function count() {
        return _ref3.apply(this, arguments);
      }

      return count;
    }()
  }, {
    key: 'keys',
    value: function () {
      var _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.ready;

              case 2:
                return _context4.abrupt('return', new Promise(function (resolve, reject) {
                  var request = void 0;
                  // 低版本 IDBObjectStore 可能没有 getAllKeys 方法
                  var idbObjectStore = _this5.getStore();
                  if ('getAllKeys' in idbObjectStore.constructor.prototype) {
                    request = idbObjectStore.getAllKeys();
                    request.onsuccess = function (event) {
                      return resolve(event.target.result);
                    };
                  } else {
                    request = idbObjectStore.openCursor();
                    var results = [];
                    request.onsuccess = function (event) {
                      var cursor = event.target.result;
                      if (cursor) {
                        results.push(cursor.key);
                        cursor.continue();
                      } else {
                        resolve(results);
                      }
                    };
                  }

                  request.onerror = reject;
                }));

              case 3:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function keys() {
        return _ref4.apply(this, arguments);
      }

      return keys;
    }()
  }, {
    key: 'delete',
    value: function () {
      var _ref5 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(key) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.ready;

              case 2:
                return _context5.abrupt('return', new Promise(function (resolve, reject) {
                  var request = _this6.getStore().delete(key);
                  request.onsuccess = function (event) {
                    return resolve(event.target.result);
                  };
                  request.onerror = reject;
                }));

              case 3:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _delete(_x5) {
        return _ref5.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: 'clear',
    value: function clear(key, value) {
      indexedDB.deleteDatabase(this.name);
    }
  }]);
  return IndexedDBStorage;
}();

var Emitter = function () {
  function Emitter() {
    classCallCheck(this, Emitter);

    this._listeners = {};
  }

  createClass(Emitter, [{
    key: '$on',
    value: function $on(type, cb, ctx) {
      ctx = ctx || null;
      if (!this._listeners[type]) this._listeners[type] = [];
      this._listeners[type].push({
        cb: cb,
        ctx: ctx
      });
      return this._listeners[type].length - 1;
    }
  }, {
    key: '$once',
    value: function $once(type, cb, ctx) {
      ctx = ctx || null;
      
    }
  }, {
    key: '$off',
    value: function $off(type, cb) {
      var _this = this;

      if (!this._listeners[type] || !this._listeners[type].length) return;
      if (!cb) {
        this._listeners[type].map(function (cb) {
          return cb = null;
        });
        this._listeners[type] = [];
      }
      if (typeof cb === 'function') {
        this._listeners[type].map(function (func, i) {
          if (func.cb === cb) {
            _this._listeners[type].splice(i, 1);
            func = null;
          }
        });
      }
      if (typeof cb === 'number') {
        this._listeners[type].splice(cb, 1);
      }
    }
  }, {
    key: '$emit',
    value: function $emit() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (!args.length) return;
      var type = args[0];
      args.shift();
      if (this._listeners[type] && this._listeners[type].length) {
        this._listeners[type].map(function (item) {
          item.cb.apply(item.ctx, args);
        });
      }
    }
  }]);
  return Emitter;
}();

var CacheStrategy = function () {
  function CacheStrategy(_ref) {
    var name = _ref.name,
        cacheName = _ref.cacheName,
        cacheStore = _ref.cacheStore,
        helpers = _ref.helpers,
        options = _ref.options;
    classCallCheck(this, CacheStrategy);

    this.name = name;
    this.cacheName = cacheName;
    this.helpers = helpers;
    this.cacheStore = cacheStore;
    this.state = options;
    var strategyOptions = options.strategies[this.name] || {};

    if (strategyOptions instanceof Array) {
      this.options = {
        includes: strToReg(strategyOptions),
        excludes: []
      };
    } else {
      this.options = {
        includes: strToReg(strategyOptions.includes || []),
        excludes: strToReg(strategyOptions.excludes || [])
      };
    }
  }

  createClass(CacheStrategy, [{
    key: 'getCache',
    value: function getCache$$1() {
      return caches.open(this.cacheName).then(function (cache) {
        return cache;
      });
    }
  }, {
    key: 'test',
    value: function test(request) {
      if (!request || !request.url) return false;
      var canCache = false;
      var has = false;
      var url = request.url;

      // 没有相关配置，忽略
      if (!this.options) return canCache;

      this.options.excludes.map(function (spec) {
        if (has) return;
        has = spec.test(url);
      });

      if (has) return canCache;

      this.options.includes.map(function (spec) {
        if (canCache) return;
        canCache = spec.test(url);
      });

      return canCache;
    }
  }, {
    key: 'debug',
    value: function debug$$1(msg) {
      debug('[Strategies ' + this.name + ']: ' + msg);
    }
  }]);
  return CacheStrategy;
}();

var CacheFirst = function (_CacheStrategy) {
  inherits(CacheFirst, _CacheStrategy);

  function CacheFirst(_ref) {
    var cacheName = _ref.cacheName,
        cacheStore = _ref.cacheStore,
        helpers = _ref.helpers,
        options = _ref.options;
    classCallCheck(this, CacheFirst);
    return possibleConstructorReturn(this, (CacheFirst.__proto__ || Object.getPrototypeOf(CacheFirst)).call(this, {
      name: 'CacheFirst',
      cacheName: cacheName,
      cacheStore: cacheStore,
      helpers: helpers,
      options: options
    }));
  }

  createClass(CacheFirst, [{
    key: 'handleRequest',
    value: function handleRequest(req) {
      return this.cacheFirst(req);
    }
  }, {
    key: 'cacheFirst',
    value: function cacheFirst(req) {
      var _this2 = this;

      var response = void 0;

      return this.getCache().then(function (cache) {
        return cache.match(req);
      }).then(function (res) {
        if (!res) return false;
        response = res;
        // check isCacheFresh
        // cost: 2 - 10 ms
        return _this2.helpers.isCacheFresh(req);
      }).then(function (isFresh) {
        if (!isFresh) {
          _this2.debug('\u274C network ' + req.url);
          return _this2.helpers.fetchAndCache(req);
        }
        _this2.helpers.logger.markEnd(req.url, {
          strategy: 'cacheFirst'
        });
        _this2.debug('\u2705 cache ' + req.url);

        return response;
      });
    }
  }]);
  return CacheFirst;
}(CacheStrategy);

var CacheAndRefresh = function (_CacheStrategy) {
  inherits(CacheAndRefresh, _CacheStrategy);

  function CacheAndRefresh(_ref) {
    var cacheName = _ref.cacheName,
        cacheStore = _ref.cacheStore,
        helpers = _ref.helpers,
        options = _ref.options;
    classCallCheck(this, CacheAndRefresh);
    return possibleConstructorReturn(this, (CacheAndRefresh.__proto__ || Object.getPrototypeOf(CacheAndRefresh)).call(this, {
      name: 'CacheAndRefresh',
      cacheName: cacheName,
      cacheStore: cacheStore,
      helpers: helpers,
      options: options
    }));
  }

  createClass(CacheAndRefresh, [{
    key: 'handleRequest',
    value: function handleRequest(req) {
      return this.cacheAndRefresh(req);
    }
  }, {
    key: 'notifyUpdate',
    value: function notifyUpdate(newRes, oldRes) {
      if (!newRes || !newRes.url) return;
      // Etag matched, ignore
      if (newRes.headers.get('ETag') === oldRes.headers.get('ETag')) return this.debug('[notifyUpdate]: ignore');

      // TODO: need notify msg helper
      // console.log('msg', {
      //   type: 'thunder:refresh',
      //   url: newRes.url,
      //   eTag: newRes.headers.get('ETag')
      // })
    }
  }, {
    key: 'cacheAndRefresh',
    value: function cacheAndRefresh(req) {
      var _this2 = this;

      return this.getCache().then(function (cache) {
        return cache.match(req);
      }).then(function (oldRes) {
        // no cache, only fetchAndCache
        if (!oldRes) return _this2.helpers.fetchAndCache(req);
        // has cache, notify aftet fetchAndCache
        _this2.helpers.logger.markEnd(req.url, {
          strategy: 'cacheAndRefresh'
        });
        _this2.debug('✅ cacheAndRefresh ', req.url);
        _this2.helpers.fetchAndCache(req).then(function (newRes) {
          _this2.notifyUpdate(newRes, oldRes);
        });
        return oldRes;
      });
    }
  }]);
  return CacheAndRefresh;
}(CacheStrategy);

var URL_REG = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
var URL_PARAMESREG = /[?&]([^=&#]+)=([^&#]*)/g;
var PATCH_URL = 'https://jarvas-static.meituan.net/diff/';
var DIFF_PREFIX = '$$$diff_chunk#';
var STARK_PUBLIC_PATH = 's3plus.meituan.net/v1/mss_e2821d7f0cfe4ac1bf9202ecf9590e67/cdn-prod';

var STARK_DIFF_CODE = {
  CLIENT_PATCH_ERROR: 416,
  UNKNOWN_ERROR: 400,
  LOCAL_VERSION_NOT_FOUND: 205
};

function StarkError(message, code) {
  this.message = message;
  this.statusCode = code;
}

var StarkDiff = function (_CacheStrategy) {
  inherits(StarkDiff, _CacheStrategy);

  function StarkDiff(_ref) {
    var cacheName = _ref.cacheName,
        cacheStore = _ref.cacheStore,
        helpers = _ref.helpers,
        options = _ref.options,
        state = _ref.state;
    classCallCheck(this, StarkDiff);

    var _this = possibleConstructorReturn(this, (StarkDiff.__proto__ || Object.getPrototypeOf(StarkDiff)).call(this, {
      name: 'StarkDiff',
      cacheName: cacheName,
      cacheStore: cacheStore,
      helpers: helpers,
      options: options
    }));

    _this.state = state;
    return _this;
  }

  createClass(StarkDiff, [{
    key: 'handleRequest',
    value: function handleRequest(req) {
      return this.StarkDiff(req);
    }
    /**
     * diff 主入口
     * @param {Request} req
     */

  }, {
    key: 'StarkDiff',
    value: function StarkDiff(req) {
      var _this2 = this;

      // 先从cache中匹配
      return this.getCache().then(function (cache) {
        return cache.match(req);
      }).then(function (cacheRes) {
        // 存在cache 则直接返回
        if (cacheRes) return cacheRes;
        return _this2.noCache(req);
      });
    }
    /**
     * 处理缓存不存在的情况
     * @param {Request} req
     */

  }, {
    key: 'noCache',
    value: function noCache(req) {
      var _this3 = this;

      var chunkInfo = this.parseUrl(req.url);
      // 如果通过url无法获取chunk信息
      // 直接将请求缓存
      if (!chunkInfo) return this.starkFetch(req);
      var chunkName = chunkInfo.chunkName;

      var cacheKey = DIFF_PREFIX + chunkName;

      // 尝试根据chunkInfo从indexedDB获取缓存
      return this.cacheStore.get(cacheKey).then(function (cachChunkInfo) {
        if (!cachChunkInfo) {
          _this3.updateChunkInfo(chunkInfo);
          return _this3.starkFetch(req);
        } else {
          return _this3.patchChunk(req, chunkInfo, cachChunkInfo);
        }
      });
    }
    /**
     * parse url 暂时通过url参数来获取chunk信息
     * @param {*} url
     */

  }, {
    key: 'parseUrl',
    value: function parseUrl(_url) {
      var url = decodeURIComponent(_url);
      var parames = url.match(URL_PARAMESREG);

      var chunkObj = {
        chunkName: '',
        hash: '',
        chunkType: '',
        cacheUrl: ''
      };

      if (parames && parames.length) {
        var tmpObj = {};
        parames.forEach(function (paramStr) {
          var arr = paramStr.split('=');
          tmpObj[arr[0].slice(1)] = arr[1] || '';
        });
        var chunkName = tmpObj.chunkName,
            hash = tmpObj.hash,
            chunkType = tmpObj.chunkType;

        chunkObj.chunkName = chunkName;
        chunkObj.hash = hash;
        chunkObj.chunkType = chunkType;

        chunkObj.cacheUrl = url;
      }
      if (!chunkObj.chunkName || !chunkObj.hash) {
        return null;
      }
      return chunkObj;
    }
    /**
     * 自定义请求缓存
     * @param {Request} req
     */

  }, {
    key: 'starkFetch',
    value: function starkFetch(req) {
      var _this4 = this;

      return fetch(req.url).then(function (res) {
        _this4.helpers.add(req, res.clone());
        return res;
      });
    }
    /**
     * 更新indexedDB中的chunk信息
     * @param {Object} chunkInfo
     */

  }, {
    key: 'updateChunkInfo',
    value: function updateChunkInfo(chunkInfo) {
      var chunkName = chunkInfo.chunkName;

      return this.cacheStore.set(DIFF_PREFIX + chunkName, chunkInfo);
    }
    /**
     * 获取patch结果 并更新缓存
     * @param {Request} req
     * @param {Object} chunkInfo
     * @param {Object} cachChunkInfo
     */

  }, {
    key: 'patchChunk',
    value: function patchChunk(req, chunkInfo, cachChunkInfo) {
      var _this5 = this;

      // 如果版本一致则直接fetch req
      if (chunkInfo.hash === cachChunkInfo.hash) {
        return this.starkFetch(req);
      }
      var patchLink = this.getPatchLink(chunkInfo, cachChunkInfo);
      var cacheUrl = cachChunkInfo.cacheUrl;

      return Promise.all([fetch(patchLink).then(function (res) {
        return res.json();
      }), this.getCache().then(function (cache) {
        return cache.match(cacheUrl);
      }).then(function (res) {
        return res ? res.text() : null;
      })]).then(function (result) {
        var patchJson = result[0];
        var cacheText = result[1];
        // 获取老版本失败或则patch请求失败
        if (!cacheText || !patchJson) {
          return {
            content: false
          };
        }
        return _this5.recoverMin(cacheText, patchJson.content);
      }).then(function (patchRes) {
        if (!patchRes.content) {
          return _this5.starkFetch(req);
        }
        var contentString = patchRes.content;
        var blob = new Blob([contentString], { type: 'application/javascript' });
        var newRes = new Response(blob);
        // 更新缓存的资源
        _this5.helpers.add(req, newRes.clone());

        _this5.updateChunkInfo(chunkInfo);
        return newRes;
      });
    }

    /**
     * 拼接patch link
     * @param {Object} chunkInfo
     * @param {Object} cachChunkInfo
     */

  }, {
    key: 'getPatchLink',
    value: function getPatchLink(chunkInfo, cachChunkInfo) {
      var projectName = this.state.StarkOptions.projectName;

      var newPath = this.getPatchPath(chunkInfo.cacheUrl);
      var oldPath = this.getPatchPath(cachChunkInfo.cacheUrl);
      return [PATCH_URL, projectName, '?', 'oldFilePath=', encodeURIComponent(oldPath), '&', 'newFilePath=', encodeURIComponent(newPath)].join('');
    }
    /**
     * 获取patch路径
     * @param {String} url
     */

  }, {
    key: 'getPatchPath',
    value: function getPatchPath(url) {
      var publicPath = this.state.outputOptions.publicPath;

      var reg = new RegExp('.*' + publicPath);
      return url.replace(reg, '').replace(/\?.*/, '');
    }

    /**
     * 将patch结果更新到原文本
     * @param {String} source 原文本
     * @param {String} patchContent patch结果
     */

  }, {
    key: 'recoverMin',
    value: function recoverMin() {
      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var patchContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      var units = patchContent.split('\t');
      var content = source;
      var pos = 0;

      for (var i = 0; i < units.length; i++) {
        var command = units[i][0];
        if (command === '=') {
          pos += parseInt(units[i].slice(1), 10);
        } else if (command === '-') {
          var length = parseInt(units[i].slice(1), 10);
          content = content.slice(0, pos) + content.slice(pos + length);
        } else if (command === '+') {
          var newPartial = decodeURI(units[i].slice(1));
          content = content.slice(0, pos) + newPartial + content.slice(pos);
          pos += newPartial.length;
        } else {
          throw new StarkError('Broken patch found', STARK_DIFF_CODE.CLIENT_PATCH_ERROR);
        }
      }

      return {
        content: content,
        fullLength: content.length,
        patchLength: patchContent.length
      };
    }

    /**
     * request url中包含publish path并且后缀是js的可以走stark diff
     * @param {Request} request
     */

  }, {
    key: 'test',
    value: function test(request) {
      if (!request || !request.url) return false;
      var url = request.url;

      if (url.indexOf(STARK_PUBLIC_PATH) < 0) return false;
      var matches = URL_REG.exec(url);
      var path = matches ? matches[5] : '';
      // TODO: 多类型静态文件
      // 目前只能处理 js
      var arr = path.split('.');
      return arr[arr.length - 1] === 'js';
    }
  }]);
  return StarkDiff;
}(CacheStrategy);

var FALSE = false;
var isHTTPS = /^https/;
var SUCCESS_STATUS_REG = /^0|([123]\d\d)|(40[14567])|410$/;

var CacheManager = function (_Emitter) {
  inherits(CacheManager, _Emitter);

  function CacheManager(runtime) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var state = arguments[2];
    classCallCheck(this, CacheManager);

    var _this = possibleConstructorReturn(this, (CacheManager.__proto__ || Object.getPrototypeOf(CacheManager)).call(this));

    _this.runtime = runtime;
    _this.options = options;
    _this.cacheName = _this.options.cache.name;
    _this.state = state;
    _this.cacheStore = new IndexedDBStorage('$$$thunder-serviceworker$$$' + _this.options.scope);
    _this._timer = null;
    _this.strategies = _this.initStrategies();
    return _this;
  }

  createClass(CacheManager, [{
    key: 'initStrategies',
    value: function initStrategies() {
      var defaulOptions = {
        cacheName: this.cacheName,
        cacheStore: this.cacheStore,
        helpers: {
          logger: this.runtime.logger,
          fetchAndCache: this.fetchAndCache.bind(this),
          isCacheFresh: this.isCacheFresh.bind(this),
          add: this.add.bind(this)
        },
        options: this.options,
        state: this.state
      };
      return [StarkDiff, CacheAndRefresh, CacheFirst].map(function (StrategyClass) {
        return new StrategyClass(defaulOptions);
      });
    }
  }, {
    key: 'getCache',
    value: function getCache$$1() {
      return caches.open(this.cacheName).then(function (cache) {
        return cache;
      });
    }
  }, {
    key: 'isCacheFresh',
    value: function isCacheFresh(req) {
      var _this2 = this;

      return this.cacheStore.get(req.url).then(function (timeMark) {
        if (!timeMark) return false;
        var now = Date.now();
        var fresh = now - timeMark.createdAt < _this2.options.cacheMaxAgeSeconds * 1000;

        if (fresh) {
          _this2.cacheStore.set(req.url, {
            createdAt: timeMark.createdAt,
            usedAt: now,
            use: timeMark.use + 1
          });
        }

        return fresh;
      });
    }
  }, {
    key: 'shouldCache',
    value: function shouldCache(request, response) {
      var successResponses = this.options.successResponses || SUCCESS_STATUS_REG;
      if (!response) return FALSE;
      if (!response.url) return FALSE;
      if (request.method !== 'GET') return FALSE;
      if (!successResponses.test(response.status)) return FALSE;

      return this.useCache(request);
    }
  }, {
    key: 'useCache',
    value: function useCache(request) {
      var useCache = false;
      var url = request.url;

      // 非开发环境下，所有非 https 请求都放弃缓存
      if (!isLocalhost && !isHTTPS.test(url)) {
        return false;
      }

      for (var i = 0, len = this.strategies.length; i < len; i++) {
        if (this.strategies[i].test(request)) {
          useCache = true;
          break;
        }
      }

      return useCache;
    }
  }, {
    key: 'add',
    value: function add(req, res) {
      var _this3 = this;

      if (!this.shouldCache(req, res)) {
        debug('[CacheManager add]: should not Cache', req.method, req.url);
        return Promise.resolve();
      }

      return this.getCache().then(function (cache) {
        return cache.put(req, res.clone());
      }).then(function () {
        var now = Date.now();
        return _this3.cacheStore.set(req.url, {
          createdAt: now,
          usedAt: now,
          use: 1
        });
      });
    }
  }, {
    key: 'keys',
    value: function keys() {
      return this.getCache().then(function (cache) {
        return cache.keys();
      }).then(function (reqs) {
        return reqs.map(function (req) {
          return req.url;
        }).sort();
      });
    }

    /*
    * 尝试在 cache mannager 中请求
    */

  }, {
    key: 'get',
    value: function get$$1(req) {
      // try call clearExpiredCaches later
      this._clearJob();

      // match strategy handler
      var handler = void 0;
      for (var i = 0, len = this.strategies.length; i < len; i++) {
        if (this.strategies[i].test(req)) {
          handler = this.strategies[i];
          break;
        }
      }

      if (!handler) {
        debug('[cacheManager] no strategy to handle this request', req.url);
        return fetch(req);
      }

      // handleRequest
      return handler.handleRequest(req).then(function (res) {
        return res;
      }, function (err) {
        // fallback
        debug('[\u274C ' + handler.name + ' error at: ]', err);
        return fetch(req);
      });
    }
  }, {
    key: 'fetchAndCache',
    value: function fetchAndCache(request) {
      var _this4 = this;

      return simpleFetch(request, this.options).then(function (response) {
        if (!_this4.shouldCache(request, response)) return response.clone();
        _this4.add(request, response);
        return response.clone();
      });
    }
  }, {
    key: '_clearJob',
    value: function _clearJob() {
      var _this5 = this;

      // try call clearExpiredCaches later
      if (this._timer) clearTimeout(this._timer);
      this._timer = setTimeout(function () {
        _this5.clearExpiredCaches().then(function () {
          return _this5.clearOverSizeCaches();
        });
        _this5._timer = null;
      }, 800);
    }
  }, {
    key: 'clear',
    value: function clear() {
      this._cache = null;
      return caches.delete(this.cacheName);
    }
  }, {
    key: 'clearOverSizeCaches',
    value: function clearOverSizeCaches() {
      var _this6 = this;

      return this.cacheStore.count().then(function (count) {
        var maxEntries = _this6.options.cache.maxEntries || 200;
        var removeCount = count - maxEntries;
        if (removeCount < 1) return;
        return _this6.clearOldCaches(removeCount);
      });
    }
  }, {
    key: 'clearOldCaches',
    value: function clearOldCaches() {
      var _this7 = this;

      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      return this.cacheStore.keys().then(function (caches) {
        var timeMarkedCaches = caches.filter(function (i) {
          return i.val && i.val.createdAt;
        }).sort(function (a, b) {
          return a.val.usedAt - b.val.usedAt;
        });

        var queue = [];
        for (var i = 0; i < count; i++) {
          var item = timeMarkedCaches.shift();
          if (!item) break;
          queue.push(_this7.delete(item.key));
        }

        return Promise.all(queue);
      });
    }
  }, {
    key: 'clearExpiredCaches',
    value: function clearExpiredCaches() {
      var _this8 = this;

      return this.cacheStore.keys().then(function (caches) {
        var timeMarkedCaches = caches.filter(function (i) {
          return i.val && i.val.createdAt;
        });
        var queue = [];
        var now = Date.now();

        timeMarkedCaches.map(function (item) {
          var timeMark = item.val;
          if (now - timeMark.createdAt > _this8.options.cacheMaxAgeSeconds * 1000) {
            queue.push(_this8.delete(item.key));
          }
        });

        return Promise.all(queue);
      });
    }
  }, {
    key: 'delete',
    value: function _delete(url) {
      var _this9 = this;

      return this.getCache().then(function (cache) {
        return cache.delete(url);
      }).then(function () {
        return _this9.cacheStore.delete(url);
      });
    }
  }]);
  return CacheManager;
}(Emitter);

// eslint-disable-next-line
var scope = void 0;
if (self.registration) {
  scope = self.registration.scope;
} else {
  scope = self.scope || new URL('./', self.location).href;
}

var globalOptions = {
  successResponses: /^0|([123]\d\d)|(40[14567])|410$/,
  preCacheItems: [],
  networkTimeoutSeconds: null,
  debug: true,
  strategies: {},
  cacheMaxAgeSeconds: 60 * 60 * 24 * 14,
  maxEntries: 200,
  cache: {
    name: '$$$thunder-serviceworker$$$[thunder-sw-scope]$$$',
    maxEntries: 200,
    queryOptions: null
  },
  userAgent: ''
};

self.addEventListener('sync', function (event) {
  if (event.tag === 'outbox') {
    event.waitUntil(self.serviceWorkerRuntime.syncJob(event));
  }
});

var ServiceWorkerRuntime = function () {
  function ServiceWorkerRuntime(options) {
    classCallCheck(this, ServiceWorkerRuntime);

    this.options = assign({}, globalOptions);
    this.cacheManager = null;
    this.messageHandler = this._messageHandler.bind(this);
    this.fetchHandler = this._fetchHandler.bind(this);
    this.logger = new ThunderLogger();
    this._initJob = null;
  }

  createClass(ServiceWorkerRuntime, [{
    key: 'init',
    value: function init() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = state.serviceWorker;
      this.state = state;
      if (options.successResponses) options.successResponses = strToReg(options.successResponses);

      this.options = Object.assign(this.options, options);

      this.options.debug = !!options.debug;

      this.options.cache.maxEntries = options.maxEntries;
      this.cacheManager = new CacheManager(this, this.options, this.state);
      this.cacheManager.$on('msg', this.postMessage, this);
      this.fetchHandler = this._fetchHandler.bind(this);

      this._initJob = this.updateCache();

      return this._initJob;
    }
  }, {
    key: 'syncJob',
    value: function syncJob(event) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          debug('⚠️ sync_event', event);
          resolve();
          _this.postMessage({
            type: 'thudner:sync',
            data: null
          });
        }, 2000);
      });
    }
  }, {
    key: 'postMessage',
    value: function postMessage(msg) {
      clients.matchAll({ includeUncontrolled: true }).then(function (clientList) {
        clientList.forEach(function (client) {
          return client.postMessage(msg);
        });
      });
    }
  }, {
    key: 'updateCache',
    value: function updateCache() {
      var _this2 = this;

      var cacheName = this.options.cache.name;
      return clearCache(cacheName, this.options).then(function () {
        return preCache(cacheName, _this2.options.preCacheItems);
      });
    }

    /*
    * _fetchHandler
    * @param event:Event
    * 策略：
    * 判断请求是否可适用 缓存策略
    * 判断是否有 `options.userAgent`
    * 如果已有 userAgent 直接调用 `this.cacheManager.get`
    * 否则尝试在 store 中获取 userAgent，设置 `options.userAgent` 后调用 `this.cacheManager.get`
    *
    *  背景：
    * 在较低版本 webkit/blink (chrome 60-) 下
    * service worker scope 中 navigator.userAgent 与 window.navigator.userAgent 不一致
    */

  }, {
    key: '_fetchHandler',
    value: function _fetchHandler(event) {
      var _this3 = this;

      // skip when uninit
      if (!this.cacheManager) return;
      var url = event.request.url;
      var useCache = this.cacheManager.useCache(event.request);
      var job = Promise.resolve();

      // sync: cancel use cache
      if (!useCache) return;

      // without userAgent
      if (!this.options.userAgent) {
        // try read cacheStore async
        this.cacheManager.cacheStore.get('options:userAgent').then(function (userAgent) {
          _this3.options.userAgent = userAgent || '';
        });
        // finally skip
      } else {
        // with userAgent
        this.logger.mark(url);
        job = this.cacheManager.get(event.request);

        event.respondWith(job);

        if ('waitUntil' in event) {
          event.waitUntil(job);
        }
      }
    }
  }, {
    key: '_messageHandler',
    value: function _messageHandler(event) {
      var _this4 = this;

      var job = Promise.resolve();

      job.then(function () {
        switch (event.data.command) {
          case 'update:ua':
            _this4.options.userAgent = event.data.userAgent;
            _this4.cacheManager.cacheStore.set('options:userAgent', event.data.userAgent).then(function () {
              event.ports[0].postMessage({
                error: null,
                data: _this4.options
              });
            });
            return;
          case 'cache:keys':
            return _this4.cacheManager.keys().then(function (urls) {
              event.ports[0].postMessage({
                error: null,
                data: urls
              });
            });
          // This command adds a new request/response pair to the cache.
          case 'cache:add':
            // If event.data.url isn't a valid URL, new Request() will throw a TypeError which will be handled
            // by the outer .catch().
            // Hardcode {mode: 'no-cors} since the default for new Requests constructed from strings is to require
            // CORS, and we don't have any way of knowing whether an arbitrary URL that a user entered supports CORS.
            var request = new Request(event.data.url, { mode: 'no-cors' });
            return _this4.cacheManager.fetchAndCache(request).then(function () {
              event.ports[0].postMessage({
                error: null
              });
            });
          // This command removes a request/response pair from the cache (assuming it exists).
          case 'cache:delete':
            return _this4.cacheManager.delete(event.data.url).then(function (success) {
              event.ports[0].postMessage({
                error: success ? null : 'Item was not found in the cache.'
              });
            });
          case 'cache:clear':
            return _this4.cacheManager.clear().then(function () {
              event.ports[0].postMessage({
                error: null,
                data: 'cache cleared'
              });
            });
          case 'log':
            event.ports[0].postMessage({
              data: _this4.logger.logQueue
            });
            _this4.logger.logQueue = [];
            return;
          case 'store:get':
            return _this4.cacheManager.cacheStore.get(event.data.key).then(function (val) {
              return event.ports[0].postMessage({
                val: val
              });
            });
          case 'store:set':
            return _this4.cacheManager.cacheStore.set(event.data.key, event.data.val).then(function () {
              return event.ports[0].postMessage({
                err: null
              });
            });
          default:
            // This will be handled by the outer .catch().
            throw Error('Unknown command: ' + event.data.command);
        }
      }).catch(function (error) {
        // If the promise rejects, handle it by returning a standardized error message to the controlled page.
        debug('error', 'Message handling failed:', error);
        event.ports[0].postMessage({
          error: error.toString()
        });
      });
      if ('waitUntil' in event) {
        event.waitUntil(job);
      }
    }
  }]);
  return ServiceWorkerRuntime;
}();

var thunderStateServiceWorkerStr = '__THUNDER_STATE__SW__';
var thunderStateServiceWorkerOptions = {};

try {
  thunderStateServiceWorkerOptions = JSON.parse(atob(thunderStateServiceWorkerStr));
} catch (e) {
  console.error('ERROR at parsing thunderStateServiceWorkerOptions: ', e);
}

var serviceWorkerRuntime = new ServiceWorkerRuntime();

serviceWorkerRuntime.init(thunderStateServiceWorkerOptions);

self.serviceWorkerRuntime = serviceWorkerRuntime;

self.addEventListener('install', function (event) {
  if (serviceWorkerRuntime._initJob) {
    event.waitUntil(serviceWorkerRuntime._initJob.then(function () {
      return self.skipWaiting();
    }));
  } else {
    event.waitUntil(self.skipWaiting());
  }
});

self.addEventListener('activate', function (event) {
  event.waitUntil(self.clients.claim());
});

self.addEventListener('message', serviceWorkerRuntime.messageHandler);

self.addEventListener('fetch', serviceWorkerRuntime.fetchHandler);

}());
